using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class TerrainGeneration : MonoBehaviour
{
    [Header("Block")]
    public Blocks blocks;

    [Header("Tree")]
    public int treeChance = 10;
    public int minTreeHeight = 3;
    public int maxTreeHeight = 6;

    [Header("Generation Settings")]
    public int chunkSize = 16;
    public int worldSize = 100;
    public int dirtLayerHeight = 5;
    public bool generateCaves = true;
    public float surfaceValue = 0.25f;
    public float heightMultiplier = 4f;
    public int heightAddition = 25;

    [Header("Noise Settings")]
    public float terrainFreq = 0.05f;
    public float caveFreq = 0.04f;
    public float seed;
    public Texture2D caveNoiseTexture;

    [Header("Ore Settings")]
    public float coalRarity;
    public float coalSize;
    public float ironRarity, ironSize;
    public float goldRarity, goldSize;
    public float diamondRarity, diamondSize;
    public Texture2D coalVein;
    public Texture2D ironVein;
    public Texture2D goldVein;
    public Texture2D diamondVein;

    private GameObject[] worldChunks;
    private List<Vector2> worldTitles = new List<Vector2>();

    //private void OnValidate()  //onvalidate la update khi ta thay doi property
    //{
    //    if (caveNoiseTexture == null)
    //    {
    //        caveNoiseTexture = new Texture2D(worldSize, worldSize);
    //        coalVein = new Texture2D(worldSize, worldSize);
    //        ironVein = new Texture2D(worldSize, worldSize);
    //        goldVein = new Texture2D(worldSize, worldSize);
    //        diamondVein = new Texture2D(worldSize, worldSize);
    //    }

    //    GenerateNoiseTexture(caveFreq, surfaceValue, caveNoiseTexture);

    //    GenerateNoiseTexture(coalRarity, coalSize, coalVein);
    //    GenerateNoiseTexture(ironRarity, ironSize, ironVein);
    //    GenerateNoiseTexture(goldRarity, goldSize, goldVein);
    //    GenerateNoiseTexture(diamondRarity, diamondSize, diamondVein);
    //}

    public void Start()
    {
        seed = Random.Range(-10000, 10000);

        if (caveNoiseTexture == null)
        {
            caveNoiseTexture = new Texture2D(worldSize, worldSize);
            coalVein = new Texture2D(worldSize, worldSize);
            ironVein = new Texture2D(worldSize, worldSize);
            goldVein = new Texture2D(worldSize, worldSize);
            diamondVein = new Texture2D(worldSize, worldSize);
        }
        
       
        GenerateNoiseTexture(caveFreq, surfaceValue, caveNoiseTexture);

        GenerateNoiseTexture(coalRarity, coalSize, coalVein);
        GenerateNoiseTexture(ironRarity, ironSize, ironVein);
        GenerateNoiseTexture(goldRarity, goldSize, goldVein);
        GenerateNoiseTexture(diamondRarity, diamondSize, diamondVein);

        CreateChunk();
        GenerateTerrain();
    }

    public void CreateChunk()
    {
        int numChunk = worldSize / chunkSize;
        worldChunks = new GameObject[numChunk];
        for(int i=0; i < numChunk; i++)
        {
            GameObject newChunk = new GameObject();
            newChunk.name = i.ToString();   
            newChunk.transform.parent = this.transform;
            worldChunks[i] = newChunk;
        }
    }

    public void GenerateTerrain()
    {
        for (int x = 0; x < worldSize; x++)
        {
            float height = Mathf.PerlinNoise((x + seed) * terrainFreq, seed * terrainFreq) * heightMultiplier + heightAddition;
            
            for (int y = 0; y < height; y++)
            {
                Sprite titleSprite;
                if (y < height - dirtLayerHeight)
                {
                    if (coalVein.GetPixel(x, y).r > 0.5f)
                        titleSprite = blocks.coal.tileSprite;
                    else if (ironVein.GetPixel(x, y).r > 0.5f)
                        titleSprite = blocks.iron.tileSprite;
                    else if (goldVein.GetPixel(x, y).r > 0.5f)
                        titleSprite = blocks.gold.tileSprite;
                    else if (diamondVein.GetPixel(x, y).r > 0.5f)
                        titleSprite = blocks.diamond.tileSprite;
                    else
                        titleSprite = blocks.stone.tileSprite;                   
                }
                else if (y < height - 1)
                {
                    titleSprite = blocks.dirt.tileSprite;
                }
                else
                {                   
                    titleSprite = blocks.grass.tileSprite;                   
                }

                if (generateCaves)
                {
                    if (caveNoiseTexture.GetPixel(x, y).r > 0.5f)
                    {
                       PlaceTile(titleSprite, x, y); 
                    }
                }
                else
                {
                    PlaceTile(titleSprite, x, y);
                }

                if(y >= height - 1)
                {
                    int t = Random.Range(0, treeChance);
                    if (t == 1)
                    {
                        if (worldTitles.Contains(new Vector2(x, y)))
                            GenerateTree(x, y + 1);
                    }
                }
            }
        }
    }

    public void GenerateNoiseTexture(float frequency, float limit, Texture2D noiseTexture)
    {

        for(int x = 0; x < noiseTexture.width; x++)
        {
            for(int y = 0 ; y < noiseTexture.height; y++)
            {
                float v = Mathf.PerlinNoise((x+seed) * frequency, (y+seed) * frequency);
                if(v > limit)
                    noiseTexture.SetPixel(x, y, Color.white);
                else
                    noiseTexture.SetPixel(x, y, Color.black); //onvalidate khong tao texture moi', nó ch? ?è lên texture c?
            }
        }

        noiseTexture.Apply();
    }

    void GenerateTree(int x, int y)
    {
        int treeHeight = Random.Range(minTreeHeight, maxTreeHeight);
        for (int i = 0; i <= treeHeight; i++)
        {
            PlaceTile(blocks.log.tileSprite, x, y + i);
        }

        for (int i = 1; i <= 3; i++)
        {
            if(x <= worldSize - 3)
            {
                PlaceTile(blocks.leaf.tileSprite, x, y + treeHeight + i);
                PlaceTile(blocks.leaf.tileSprite, x - 1, y + treeHeight + i - 1);
                PlaceTile(blocks.leaf.tileSprite, x + 1, y + treeHeight + i - 1);
                for (int j = 1; j <= 2; j++)
                {
                    PlaceTile(blocks.leaf.tileSprite, x - 2, y + treeHeight + j - 1);
                    PlaceTile(blocks.leaf.tileSprite, x + 2, y + treeHeight + j - 1);
                }
            }
        }

    }

    public void PlaceTile(Sprite titleSprite, int x, int y)
    {
        GameObject newTile = new GameObject();

        float chunkCord = Mathf.Round(x / chunkSize) * chunkSize;
        chunkCord /= chunkSize;
        newTile.transform.parent = worldChunks[(int)chunkCord].transform;

        newTile.AddComponent<SpriteRenderer>();
        newTile.GetComponent<SpriteRenderer>().sprite = titleSprite;
        newTile.name = titleSprite.name;
        newTile.transform.position = new Vector2(x + 0.5f, y + 0.5f);

        worldTitles.Add(newTile.transform.position - (Vector3.one *0.5f));
    }
}
